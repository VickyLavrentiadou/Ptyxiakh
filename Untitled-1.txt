#---------------Μια πρώτη προσέγγιση----------------

import nltk
from nltk.classify import NaiveBayesClassifier



f = open(r'C:\Users\Vicky\Desktop\Πτυχιακή\Reviews-9-products\Hitachi router.txt')
words = f.read()

pos_words = open( r'C:\Users\Vicky\Desktop\Πτυχιακή\opinion-lexicon-English\positive-words.txt')
neg_words = open(r'C:\Users\Vicky\Desktop\Πτυχιακή\opinion-lexicon-English\negative-words.txt')
positive = pos_words.read()
negative = neg_words.read()

positive_vocab = [ ]
negative_vocab = [ ]
neutral_vocab = [ ]

positive_vocab.append(positive)
negative_vocab.append(negative)

print(len(words))

def word_feats(words):
    return dict([(word, True) for word in words])

 
positive_features = [(word_feats(pos), 'pos') for pos in positive_vocab]
negative_features = [(word_feats(neg), 'neg') for neg in negative_vocab]
neutral_features = [(word_feats(neu), 'neu') for neu in neutral_vocab]
 
train_set = negative_features + positive_features + neutral_features
 
classifier = NaiveBayesClassifier.train(train_set) 
 
# Predict
neg = 0
pos = 0
sentence = "Awesome movie, I liked it"
sentence = sentence.lower()
words = sentence.split(' ')
for word in words:
    classResult = classifier.classify( word_feats(word))
    if classResult == 'neg':
        neg = neg + 1
    if classResult == 'pos':
        pos = pos + 1
 
f.close()
print('The positive reviews are: '+ str(float(pos)))
print('The negative reviews are: '+ str(neg))
 
print('Positive: ' + str(float(pos)/len(words)))
print('Negative: ' + str(float(neg)/len(words)))

#------------Μια δεύτερη προσέγγιση-------------

import re,nltk
from nltk.classify import NaiveBayesClassifier
import atexit
import os


#να ψάξω να βρω αν υπάρχουν έτοιμα λεξικά απο την python για θετικές και αρνητικές λέξεις
#Επιπλέον να βρω λύση στο ζήτημα με το πως θα εισάγω τις λέξεις για σύγκριση απο το κείμενο 

pos_words = open( r'C:\Users\Vicky\Desktop\Πτυχιακή\opinion-lexicon-English\positive-words.txt')
neg_words = open(r'C:\Users\Vicky\Desktop\Πτυχιακή\opinion-lexicon-English\negative-words.txt')

positive_vocab = [ ]
negative_vocab = [ ]
neutral_vocab = [ ]


positive_vocab = pos_words.readlines()
negative_vocab = neg_words.readlines()


with open('C:\Users\Vicky\Desktop\Πτυχιακή\Reviews-9-products\Hitachi router.txt', 'r') as f
 for words in f:


def word_feats(words):
    return dict([(word, True) for word in words])

 
positive_features = [(word_feats(pos), 'pos') for pos in positive_vocab]
negative_features = [(word_feats(neg), 'neg') for neg in negative_vocab]
neutral_features = [(word_feats(neu), 'neu') for neu in neutral_vocab]
 
train_set = negative_features + positive_features + neutral_features
 
classifier = NaiveBayesClassifier.train(train_set) 
 
# Predict
neg = 0
pos = 0
sentence = "Awesome movie, I liked it"
sentence = sentence.lower()
words = sentence.split(' ')
for word in words:
    classResult = classifier.classify( word_feats(word))
    if classResult == 'neg':
        neg = neg + 1
    if classResult == 'pos':
        pos = pos + 1
 
f.close()
pos_words.close()
neg_words.close()
print('The positive reviews are: '+ str(float(pos)))
print('The negative reviews are: '+ str(neg))
 
print('Positive: ' + str(float(pos)/len(words)))
print('Negative: ' + str(float(neg)/len(words)))

